/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Snek Game API
 * Snek Game API
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: you@your-company.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/vmuckxyz/snek/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Body
 */
export interface Body {
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    cmd?: string;
}
/**
 * 
 * @export
 * @interface Bug
 */
export interface Bug {
    /**
     * 
     * @type {string}
     * @memberof Bug
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Bug
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof Bug
     */
    info?: string;
    /**
     * 
     * @type {Date}
     * @memberof Bug
     */
    timestamp?: Date;
    /**
     * 
     * @type {DebugState}
     * @memberof Bug
     */
    state?: DebugState;
}
/**
 * 
 * @export
 * @interface Command
 */
export interface Command {
    /**
     * 
     * @type {string}
     * @memberof Command
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof Command
     */
    cmd: string;
}
/**
 * 
 * @export
 * @interface Compass
 */
export interface Compass {
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    n?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    ne?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    e?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    se?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    s?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    sw?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    w?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    nw?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    up?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    down?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    _in?: string;
    /**
     * 
     * @type {string}
     * @memberof Compass
     */
    out?: string;
}
/**
 * 
 * @export
 * @interface Content
 */
export interface Content {
    /**
     * 
     * @type {string}
     * @memberof Content
     */
    text: string;
    /**
     * 
     * @type {ContentType}
     * @memberof Content
     */
    type?: ContentType;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ContentType {
    Markdown = <any> 'markdown',
    Raw = <any> 'raw',
    Iframe = <any> 'iframe'
}
/**
 * 
 * @export
 * @interface DebugState
 */
export interface DebugState extends GameState {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DebugState
     */
    vars?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface Equipped
 */
export interface Equipped extends Item {
    /**
     * 
     * @type {string}
     * @memberof Equipped
     */
    slot?: string;
}
/**
 * 
 * @export
 * @interface GameState
 */
export interface GameState {
    /**
     * 
     * @type {Content}
     * @memberof GameState
     */
    content?: Content;
    /**
     * 
     * @type {Compass}
     * @memberof GameState
     */
    compass?: Compass;
    /**
     * 
     * @type {Inventory}
     * @memberof GameState
     */
    inventory?: Inventory;
    /**
     * 
     * @type {Array<Item>}
     * @memberof GameState
     */
    people?: Array<Item>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof GameState
     */
    exits?: Array<Item>;
    /**
     * 
     * @type {any}
     * @memberof GameState
     */
    map?: any;
    /**
     * 
     * @type {Array<Quest>}
     * @memberof GameState
     */
    quests?: Array<Quest>;
    /**
     * 
     * @type {number}
     * @memberof GameState
     */
    showMap?: number;
    /**
     * 
     * @type {number}
     * @memberof GameState
     */
    showInventory?: number;
}
/**
 * 
 * @export
 * @interface Inventory
 */
export interface Inventory {
    /**
     * 
     * @type {Array<Item>}
     * @memberof Inventory
     */
    items?: Array<Item>;
    /**
     * 
     * @type {Array<Equipped>}
     * @memberof Inventory
     */
    equipment?: Array<Equipped>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Inventory
     */
    keyItems?: Array<Item>;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * 
     * @type {Array<Command>}
     * @memberof Item
     */
    commands?: Array<Command>;
}
/**
 * 
 * @export
 * @interface MapItem
 */
export interface MapItem {
    /**
     * 
     * @type {Vector2i}
     * @memberof MapItem
     */
    pos: Vector2i;
    /**
     * 
     * @type {Vector2i}
     * @memberof MapItem
     */
    size: Vector2i;
    /**
     * 
     * @type {string}
     * @memberof MapItem
     */
    image: string;
    /**
     * 
     * @type {string}
     * @memberof MapItem
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof MapItem
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof MapItem
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof MapItem
     */
    blocked?: boolean;
    /**
     * 
     * @type {any}
     * @memberof MapItem
     */
    submap?: any;
}
/**
 * 
 * @export
 * @interface ModelMap
 */
export interface ModelMap {
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ModelMap
     */
    image: string;
    /**
     * 
     * @type {Vector2i}
     * @memberof ModelMap
     */
    size: Vector2i;
    /**
     * 
     * @type {Array<MapItem>}
     * @memberof ModelMap
     */
    items: Array<MapItem>;
}
/**
 * 
 * @export
 * @interface Option
 */
export interface Option {
    /**
     * 
     * @type {string}
     * @memberof Option
     */
    type: Option.TypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Option
     */
    value: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Option
     */
    _enum?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Option
     */
    minValue?: number;
    /**
     * 
     * @type {number}
     * @memberof Option
     */
    maxValue?: number;
}

/**
 * @export
 * @namespace Option
 */
export namespace Option {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Switch = <any> 'switch',
        Range = <any> 'range',
        Enum = <any> 'enum'
    }
}
/**
 * 
 * @export
 * @interface Quest
 */
export interface Quest {
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    status: Quest.StatusEnum;
}

/**
 * @export
 * @namespace Quest
 */
export namespace Quest {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        NotStarted = <any> 'not_started',
        InProgress = <any> 'in_progress',
        Failed = <any> 'failed',
        FailedTryAgain = <any> 'failed_try_again',
        Completed = <any> 'completed',
        CompletedTryAgain = <any> 'completed_try_again'
    }
}
/**
 * 
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * 
     * @type {string}
     * @memberof SignInRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SignInRequest
     */
    password: string;
    /**
     * 
     * @type {number}
     * @memberof SignInRequest
     */
    rememberMe?: number;
}
/**
 * 
 * @export
 * @interface SignUpRequest
 */
export interface SignUpRequest {
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof SignUpRequest
     */
    rememberMe?: number;
}
/**
 * 
 * @export
 * @interface Vector2i
 */
export interface Vector2i {
    /**
     * 
     * @type {number}
     * @memberof Vector2i
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof Vector2i
     */
    y: number;
}
/**
 * AdminApi - fetch parameter creator
 * @export
 */
export const AdminApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the current game state of the user with the given ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserState(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserState.');
            }
            const localVarPath = `/debug/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Copies the game snapshot associated with a given bug to a new user, and associates that user with the current session.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mimicBugById(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mimicBugById.');
            }
            const localVarPath = `/mimicbug/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mimicUserById(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mimicUserById.');
            }
            const localVarPath = `/mimicuser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the current game state of the user with the given ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserState(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DebugState> {
            const localVarFetchArgs = AdminApiFetchParamCreator(configuration).getUserState(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Copies the game snapshot associated with a given bug to a new user, and associates that user with the current session.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mimicBugById(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AdminApiFetchParamCreator(configuration).mimicBugById(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mimicUserById(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AdminApiFetchParamCreator(configuration).mimicUserById(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Gets the current game state of the user with the given ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserState(id: string, options?: any) {
            return AdminApiFp(configuration).getUserState(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Copies the game snapshot associated with a given bug to a new user, and associates that user with the current session.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mimicBugById(id: string, options?: any) {
            return AdminApiFp(configuration).mimicBugById(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mimicUserById(id: string, options?: any) {
            return AdminApiFp(configuration).mimicUserById(id, options)(fetch, basePath);
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary Gets the current game state of the user with the given ID.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getUserState(id: string, options?: any) {
        return AdminApiFp(this.configuration).getUserState(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Copies the game snapshot associated with a given bug to a new user, and associates that user with the current session.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public mimicBugById(id: string, options?: any) {
        return AdminApiFp(this.configuration).mimicBugById(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public mimicUserById(id: string, options?: any) {
        return AdminApiFp(this.configuration).mimicUserById(id, options)(this.fetch, this.basePath);
    }

}
/**
 * AnonymousApi - fetch parameter creator
 * @export
 */
export const AnonymousApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugIdGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling bugIdGet.');
            }
            const localVarPath = `/bug/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get (or redirect to) the HTML interface.  Also handles checking the auth cookie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndex(options: any = {}): FetchArgs {
            const localVarPath = `/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the Terms of Service for this game. 
         * @summary Terms of Service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms(options: any = {}): FetchArgs {
            const localVarPath = `/tos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs in and returns the authentication cookie
         * @param {SignInRequest} body A JSON object containing the login and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUser(body: SignInRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling signInUser.');
            }
            const localVarPath = `/signin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignInRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnonymousApi - functional programming interface
 * @export
 */
export const AnonymousApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Bug> {
            const localVarFetchArgs = AnonymousApiFetchParamCreator(configuration).bugIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get (or redirect to) the HTML interface.  Also handles checking the auth cookie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndex(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AnonymousApiFetchParamCreator(configuration).getIndex(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the Terms of Service for this game. 
         * @summary Terms of Service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AnonymousApiFetchParamCreator(configuration).getTerms(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Logs in and returns the authentication cookie
         * @param {SignInRequest} body A JSON object containing the login and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUser(body: SignInRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AnonymousApiFetchParamCreator(configuration).signInUser(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AnonymousApi - factory interface
 * @export
 */
export const AnonymousApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bugIdGet(id: string, options?: any) {
            return AnonymousApiFp(configuration).bugIdGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get (or redirect to) the HTML interface.  Also handles checking the auth cookie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndex(options?: any) {
            return AnonymousApiFp(configuration).getIndex(options)(fetch, basePath);
        },
        /**
         * Returns the Terms of Service for this game. 
         * @summary Terms of Service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms(options?: any) {
            return AnonymousApiFp(configuration).getTerms(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Logs in and returns the authentication cookie
         * @param {SignInRequest} body A JSON object containing the login and password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUser(body: SignInRequest, options?: any) {
            return AnonymousApiFp(configuration).signInUser(body, options)(fetch, basePath);
        },
    };
};

/**
 * AnonymousApi - object-oriented interface
 * @export
 * @class AnonymousApi
 * @extends {BaseAPI}
 */
export class AnonymousApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnonymousApi
     */
    public bugIdGet(id: string, options?: any) {
        return AnonymousApiFp(this.configuration).bugIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get (or redirect to) the HTML interface.  Also handles checking the auth cookie.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnonymousApi
     */
    public getIndex(options?: any) {
        return AnonymousApiFp(this.configuration).getIndex(options)(this.fetch, this.basePath);
    }

    /**
     * Returns the Terms of Service for this game. 
     * @summary Terms of Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnonymousApi
     */
    public getTerms(options?: any) {
        return AnonymousApiFp(this.configuration).getTerms(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Logs in and returns the authentication cookie
     * @param {SignInRequest} body A JSON object containing the login and password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnonymousApi
     */
    public signInUser(body: SignInRequest, options?: any) {
        return AnonymousApiFp(this.configuration).signInUser(body, options)(this.fetch, this.basePath);
    }

}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SignUpRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: SignUpRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/newuser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignUpRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentState(options: any = {}): FetchArgs {
            const localVarPath = `/debug`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user's inventory.
         * @summary Gets the user's item inventory, including active equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory(options: any = {}): FetchArgs {
            const localVarPath = `/inv`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(options: any = {}): FetchArgs {
            const localVarPath = `/map`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions(options: any = {}): FetchArgs {
            const localVarPath = `/options`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the user's quest list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuests(options: any = {}): FetchArgs {
            const localVarPath = `/quests`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Processes a user interaction, and returns the next state of the game.
         * @param {Body} body 
         * @param {string} [full] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        next(body: Body, full?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling next.');
            }
            const localVarPath = `/next`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            if (full !== undefined) {
                localVarQueryParameter['full'] = full;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new bug.  Copies the user's current game state and attaches it to the bug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewBug(options: any = {}): FetchArgs {
            const localVarPath = `/bug/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the current state of the UI based on the state of the user's game session.
         * @param {string} [full] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resume(full?: string, options: any = {}): FetchArgs {
            const localVarPath = `/resume`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            if (full !== undefined) {
                localVarQueryParameter['full'] = full;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<Option>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOptions(body: Array<Option>, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setOptions.');
            }
            const localVarPath = `/options`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;Option&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOut(options: any = {}): FetchArgs {
            const localVarPath = `/signout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("JSESSIONID")
					: configuration.apiKey;
                localVarQueryParameter["JSESSIONID"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SignUpRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: SignUpRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).createUser(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentState(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DebugState> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCurrentState(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current user's inventory.
         * @summary Gets the user's item inventory, including active equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Inventory> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getInventory(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getMap(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Option>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getOptions(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the user's quest list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuests(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Quest>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getQuests(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Processes a user interaction, and returns the next state of the game.
         * @param {Body} body 
         * @param {string} [full] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        next(body: Body, full?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GameState> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).next(body, full, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a new bug.  Copies the user's current game state and attaches it to the bug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewBug(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postNewBug(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the current state of the UI based on the state of the user's game session.
         * @param {string} [full] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resume(full?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GameState> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).resume(full, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<Option>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOptions(body: Array<Option>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).setOptions(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOut(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).signOut(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {SignUpRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: SignUpRequest, options?: any) {
            return DefaultApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentState(options?: any) {
            return DefaultApiFp(configuration).getCurrentState(options)(fetch, basePath);
        },
        /**
         * Get the current user's inventory.
         * @summary Gets the user's item inventory, including active equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory(options?: any) {
            return DefaultApiFp(configuration).getInventory(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMap(options?: any) {
            return DefaultApiFp(configuration).getMap(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions(options?: any) {
            return DefaultApiFp(configuration).getOptions(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the user's quest list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuests(options?: any) {
            return DefaultApiFp(configuration).getQuests(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Processes a user interaction, and returns the next state of the game.
         * @param {Body} body 
         * @param {string} [full] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        next(body: Body, full?: string, options?: any) {
            return DefaultApiFp(configuration).next(body, full, options)(fetch, basePath);
        },
        /**
         * Creates a new bug.  Copies the user's current game state and attaches it to the bug.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNewBug(options?: any) {
            return DefaultApiFp(configuration).postNewBug(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the current state of the UI based on the state of the user's game session.
         * @param {string} [full] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resume(full?: string, options?: any) {
            return DefaultApiFp(configuration).resume(full, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<Option>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOptions(body: Array<Option>, options?: any) {
            return DefaultApiFp(configuration).setOptions(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOut(options?: any) {
            return DefaultApiFp(configuration).signOut(options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {SignUpRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUser(body: SignUpRequest, options?: any) {
        return DefaultApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentState(options?: any) {
        return DefaultApiFp(this.configuration).getCurrentState(options)(this.fetch, this.basePath);
    }

    /**
     * Get the current user's inventory.
     * @summary Gets the user's item inventory, including active equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInventory(options?: any) {
        return DefaultApiFp(this.configuration).getInventory(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMap(options?: any) {
        return DefaultApiFp(this.configuration).getMap(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOptions(options?: any) {
        return DefaultApiFp(this.configuration).getOptions(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the user's quest list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuests(options?: any) {
        return DefaultApiFp(this.configuration).getQuests(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Processes a user interaction, and returns the next state of the game.
     * @param {Body} body 
     * @param {string} [full] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public next(body: Body, full?: string, options?: any) {
        return DefaultApiFp(this.configuration).next(body, full, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a new bug.  Copies the user's current game state and attaches it to the bug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postNewBug(options?: any) {
        return DefaultApiFp(this.configuration).postNewBug(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the current state of the UI based on the state of the user's game session.
     * @param {string} [full] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resume(full?: string, options?: any) {
        return DefaultApiFp(this.configuration).resume(full, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<Option>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setOptions(body: Array<Option>, options?: any) {
        return DefaultApiFp(this.configuration).setOptions(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signOut(options?: any) {
        return DefaultApiFp(this.configuration).signOut(options)(this.fetch, this.basePath);
    }

}
