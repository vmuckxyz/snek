/**
 * Snek Game API
 * Snek Game API
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: you@your-company.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AdminApi", () => {
  let instance: api.AdminApi
  beforeEach(function() {
    instance = new api.AdminApi(config)
  });

  test("getUserState", () => {
    const id: string = "id_example"
    return expect(instance.getUserState(id, {})).resolves.toBe(null)
  })
  test("mimicBugById", () => {
    const id: string = "id_example"
    return expect(instance.mimicBugById(id, {})).resolves.toBe(null)
  })
  test("mimicUserById", () => {
    const id: string = "id_example"
    return expect(instance.mimicUserById(id, {})).resolves.toBe(null)
  })
})

describe("AnonymousApi", () => {
  let instance: api.AnonymousApi
  beforeEach(function() {
    instance = new api.AnonymousApi(config)
  });

  test("bugIdGet", () => {
    const id: string = "id_example"
    return expect(instance.bugIdGet(id, {})).resolves.toBe(null)
  })
  test("getIndex", () => {
    return expect(instance.getIndex({})).resolves.toBe(null)
  })
  test("getTerms", () => {
    return expect(instance.getTerms({})).resolves.toBe(null)
  })
  test("signInUser", () => {
    const body: api.SignInRequest = undefined
    return expect(instance.signInUser(body, {})).resolves.toBe(null)
  })
})

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("createUser", () => {
    const body: api.SignUpRequest = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("getCurrentState", () => {
    return expect(instance.getCurrentState({})).resolves.toBe(null)
  })
  test("getInventory", () => {
    return expect(instance.getInventory({})).resolves.toBe(null)
  })
  test("getMap", () => {
    return expect(instance.getMap({})).resolves.toBe(null)
  })
  test("getOptions", () => {
    return expect(instance.getOptions({})).resolves.toBe(null)
  })
  test("getQuests", () => {
    return expect(instance.getQuests({})).resolves.toBe(null)
  })
  test("next", () => {
    const body: api.Body = undefined
    const full: string = "full_example"
    return expect(instance.next(body, full, {})).resolves.toBe(null)
  })
  test("postNewBug", () => {
    return expect(instance.postNewBug({})).resolves.toBe(null)
  })
  test("resume", () => {
    const full: string = "full_example"
    return expect(instance.resume(full, {})).resolves.toBe(null)
  })
  test("setOptions", () => {
    const body: Array<api.Option> = undefined
    return expect(instance.setOptions(body, {})).resolves.toBe(null)
  })
  test("signOut", () => {
    return expect(instance.signOut({})).resolves.toBe(null)
  })
})

