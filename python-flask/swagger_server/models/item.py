# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.command import Command  # noqa: F401,E501
from swagger_server import util


class Item(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, text: str=None, description: str=None, commands: List[Command]=None):  # noqa: E501
        """Item - a model defined in Swagger

        :param id: The id of this Item.  # noqa: E501
        :type id: str
        :param text: The text of this Item.  # noqa: E501
        :type text: str
        :param description: The description of this Item.  # noqa: E501
        :type description: str
        :param commands: The commands of this Item.  # noqa: E501
        :type commands: List[Command]
        """
        self.swagger_types = {
            'id': str,
            'text': str,
            'description': str,
            'commands': List[Command]
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'description': 'description',
            'commands': 'commands'
        }
        self._id = id
        self._text = text
        self._description = description
        self._commands = commands

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Item.


        :return: The id of this Item.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Item.


        :param id: The id of this Item.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self) -> str:
        """Gets the text of this Item.


        :return: The text of this Item.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Item.


        :param text: The text of this Item.
        :type text: str
        """

        self._text = text

    @property
    def description(self) -> str:
        """Gets the description of this Item.


        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Item.


        :param description: The description of this Item.
        :type description: str
        """

        self._description = description

    @property
    def commands(self) -> List[Command]:
        """Gets the commands of this Item.


        :return: The commands of this Item.
        :rtype: List[Command]
        """
        return self._commands

    @commands.setter
    def commands(self, commands: List[Command]):
        """Sets the commands of this Item.


        :param commands: The commands of this Item.
        :type commands: List[Command]
        """

        self._commands = commands
