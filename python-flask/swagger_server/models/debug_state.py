# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.compass import Compass  # noqa: F401,E501
from swagger_server.models.content import Content  # noqa: F401,E501
from swagger_server.models.game_state import GameState  # noqa: F401,E501
from swagger_server.models.inventory import Inventory  # noqa: F401,E501
from swagger_server.models.item import Item  # noqa: F401,E501
from swagger_server.models.quest import Quest  # noqa: F401,E501
java.util.Map  # noqa: F401,E501
from swagger_server import util


class DebugState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, content: Content=None, compass: Compass=None, inventory: Inventory=None, people: List[Item]=None, exits: List[Item]=None, map: Map=None, quests: List[Quest]=None, show_map: int=None, show_inventory: int=None, vars: Dict=None):  # noqa: E501
        """DebugState - a model defined in Swagger

        :param content: The content of this DebugState.  # noqa: E501
        :type content: Content
        :param compass: The compass of this DebugState.  # noqa: E501
        :type compass: Compass
        :param inventory: The inventory of this DebugState.  # noqa: E501
        :type inventory: Inventory
        :param people: The people of this DebugState.  # noqa: E501
        :type people: List[Item]
        :param exits: The exits of this DebugState.  # noqa: E501
        :type exits: List[Item]
        :param map: The map of this DebugState.  # noqa: E501
        :type map: Map
        :param quests: The quests of this DebugState.  # noqa: E501
        :type quests: List[Quest]
        :param show_map: The show_map of this DebugState.  # noqa: E501
        :type show_map: int
        :param show_inventory: The show_inventory of this DebugState.  # noqa: E501
        :type show_inventory: int
        :param vars: The vars of this DebugState.  # noqa: E501
        :type vars: Dict
        """
        self.swagger_types = {
            'content': Content,
            'compass': Compass,
            'inventory': Inventory,
            'people': List[Item],
            'exits': List[Item],
            'map': Map,
            'quests': List[Quest],
            'show_map': int,
            'show_inventory': int,
            'vars': Dict
        }

        self.attribute_map = {
            'content': 'content',
            'compass': 'compass',
            'inventory': 'inventory',
            'people': 'people',
            'exits': 'exits',
            'map': 'map',
            'quests': 'quests',
            'show_map': 'showMap',
            'show_inventory': 'showInventory',
            'vars': 'vars'
        }
        self._content = content
        self._compass = compass
        self._inventory = inventory
        self._people = people
        self._exits = exits
        self._map = map
        self._quests = quests
        self._show_map = show_map
        self._show_inventory = show_inventory
        self._vars = vars

    @classmethod
    def from_dict(cls, dikt) -> 'DebugState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DebugState of this DebugState.  # noqa: E501
        :rtype: DebugState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self) -> Content:
        """Gets the content of this DebugState.


        :return: The content of this DebugState.
        :rtype: Content
        """
        return self._content

    @content.setter
    def content(self, content: Content):
        """Sets the content of this DebugState.


        :param content: The content of this DebugState.
        :type content: Content
        """

        self._content = content

    @property
    def compass(self) -> Compass:
        """Gets the compass of this DebugState.


        :return: The compass of this DebugState.
        :rtype: Compass
        """
        return self._compass

    @compass.setter
    def compass(self, compass: Compass):
        """Sets the compass of this DebugState.


        :param compass: The compass of this DebugState.
        :type compass: Compass
        """

        self._compass = compass

    @property
    def inventory(self) -> Inventory:
        """Gets the inventory of this DebugState.


        :return: The inventory of this DebugState.
        :rtype: Inventory
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory: Inventory):
        """Sets the inventory of this DebugState.


        :param inventory: The inventory of this DebugState.
        :type inventory: Inventory
        """

        self._inventory = inventory

    @property
    def people(self) -> List[Item]:
        """Gets the people of this DebugState.


        :return: The people of this DebugState.
        :rtype: List[Item]
        """
        return self._people

    @people.setter
    def people(self, people: List[Item]):
        """Sets the people of this DebugState.


        :param people: The people of this DebugState.
        :type people: List[Item]
        """

        self._people = people

    @property
    def exits(self) -> List[Item]:
        """Gets the exits of this DebugState.


        :return: The exits of this DebugState.
        :rtype: List[Item]
        """
        return self._exits

    @exits.setter
    def exits(self, exits: List[Item]):
        """Sets the exits of this DebugState.


        :param exits: The exits of this DebugState.
        :type exits: List[Item]
        """

        self._exits = exits

    @property
    def map(self) -> Map:
        """Gets the map of this DebugState.


        :return: The map of this DebugState.
        :rtype: Map
        """
        return self._map

    @map.setter
    def map(self, map: Map):
        """Sets the map of this DebugState.


        :param map: The map of this DebugState.
        :type map: Map
        """

        self._map = map

    @property
    def quests(self) -> List[Quest]:
        """Gets the quests of this DebugState.


        :return: The quests of this DebugState.
        :rtype: List[Quest]
        """
        return self._quests

    @quests.setter
    def quests(self, quests: List[Quest]):
        """Sets the quests of this DebugState.


        :param quests: The quests of this DebugState.
        :type quests: List[Quest]
        """

        self._quests = quests

    @property
    def show_map(self) -> int:
        """Gets the show_map of this DebugState.


        :return: The show_map of this DebugState.
        :rtype: int
        """
        return self._show_map

    @show_map.setter
    def show_map(self, show_map: int):
        """Sets the show_map of this DebugState.


        :param show_map: The show_map of this DebugState.
        :type show_map: int
        """

        self._show_map = show_map

    @property
    def show_inventory(self) -> int:
        """Gets the show_inventory of this DebugState.


        :return: The show_inventory of this DebugState.
        :rtype: int
        """
        return self._show_inventory

    @show_inventory.setter
    def show_inventory(self, show_inventory: int):
        """Sets the show_inventory of this DebugState.


        :param show_inventory: The show_inventory of this DebugState.
        :type show_inventory: int
        """

        self._show_inventory = show_inventory

    @property
    def vars(self) -> Dict:
        """Gets the vars of this DebugState.


        :return: The vars of this DebugState.
        :rtype: Dict
        """
        return self._vars

    @vars.setter
    def vars(self, vars: Dict):
        """Sets the vars of this DebugState.


        :param vars: The vars of this DebugState.
        :type vars: Dict
        """

        self._vars = vars
