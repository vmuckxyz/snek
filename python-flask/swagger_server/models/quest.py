# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Quest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, title: str=None, text: str=None, status: str=None):  # noqa: E501
        """Quest - a model defined in Swagger

        :param id: The id of this Quest.  # noqa: E501
        :type id: str
        :param title: The title of this Quest.  # noqa: E501
        :type title: str
        :param text: The text of this Quest.  # noqa: E501
        :type text: str
        :param status: The status of this Quest.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'text': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'text': 'text',
            'status': 'status'
        }
        self._id = id
        self._title = title
        self._text = text
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Quest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Quest of this Quest.  # noqa: E501
        :rtype: Quest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Quest.


        :return: The id of this Quest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Quest.


        :param id: The id of this Quest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Quest.


        :return: The title of this Quest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Quest.


        :param title: The title of this Quest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def text(self) -> str:
        """Gets the text of this Quest.


        :return: The text of this Quest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Quest.


        :param text: The text of this Quest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def status(self) -> str:
        """Gets the status of this Quest.


        :return: The status of this Quest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Quest.


        :param status: The status of this Quest.
        :type status: str
        """
        allowed_values = ["not_started", "in_progress", "failed", "failed_try_again", "completed", "completed_try_again"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
