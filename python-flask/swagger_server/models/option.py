# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Option(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, value: int=None, enum: List[str]=None, min_value: int=None, max_value: int=None):  # noqa: E501
        """Option - a model defined in Swagger

        :param type: The type of this Option.  # noqa: E501
        :type type: str
        :param value: The value of this Option.  # noqa: E501
        :type value: int
        :param enum: The enum of this Option.  # noqa: E501
        :type enum: List[str]
        :param min_value: The min_value of this Option.  # noqa: E501
        :type min_value: int
        :param max_value: The max_value of this Option.  # noqa: E501
        :type max_value: int
        """
        self.swagger_types = {
            'type': str,
            'value': int,
            'enum': List[str],
            'min_value': int,
            'max_value': int
        }

        self.attribute_map = {
            'type': 'type',
            'value': 'value',
            'enum': 'enum',
            'min_value': 'minValue',
            'max_value': 'maxValue'
        }
        self._type = type
        self._value = value
        self._enum = enum
        self._min_value = min_value
        self._max_value = max_value

    @classmethod
    def from_dict(cls, dikt) -> 'Option':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Option of this Option.  # noqa: E501
        :rtype: Option
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Option.


        :return: The type of this Option.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Option.


        :param type: The type of this Option.
        :type type: str
        """
        allowed_values = ["switch", "range", "enum"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self) -> int:
        """Gets the value of this Option.


        :return: The value of this Option.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this Option.


        :param value: The value of this Option.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def enum(self) -> List[str]:
        """Gets the enum of this Option.


        :return: The enum of this Option.
        :rtype: List[str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum: List[str]):
        """Sets the enum of this Option.


        :param enum: The enum of this Option.
        :type enum: List[str]
        """

        self._enum = enum

    @property
    def min_value(self) -> int:
        """Gets the min_value of this Option.


        :return: The min_value of this Option.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value: int):
        """Sets the min_value of this Option.


        :param min_value: The min_value of this Option.
        :type min_value: int
        """

        self._min_value = min_value

    @property
    def max_value(self) -> int:
        """Gets the max_value of this Option.


        :return: The max_value of this Option.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value: int):
        """Sets the max_value of this Option.


        :param max_value: The max_value of this Option.
        :type max_value: int
        """

        self._max_value = max_value
