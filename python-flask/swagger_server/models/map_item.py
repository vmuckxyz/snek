# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.vector2i import Vector2i  # noqa: F401,E501
java.util.Map  # noqa: F401,E501
from swagger_server import util


class MapItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pos: Vector2i=None, size: Vector2i=None, image: str=None, id: str=None, text: str=None, description: str=None, blocked: bool=None, submap: Map=None):  # noqa: E501
        """MapItem - a model defined in Swagger

        :param pos: The pos of this MapItem.  # noqa: E501
        :type pos: Vector2i
        :param size: The size of this MapItem.  # noqa: E501
        :type size: Vector2i
        :param image: The image of this MapItem.  # noqa: E501
        :type image: str
        :param id: The id of this MapItem.  # noqa: E501
        :type id: str
        :param text: The text of this MapItem.  # noqa: E501
        :type text: str
        :param description: The description of this MapItem.  # noqa: E501
        :type description: str
        :param blocked: The blocked of this MapItem.  # noqa: E501
        :type blocked: bool
        :param submap: The submap of this MapItem.  # noqa: E501
        :type submap: Map
        """
        self.swagger_types = {
            'pos': Vector2i,
            'size': Vector2i,
            'image': str,
            'id': str,
            'text': str,
            'description': str,
            'blocked': bool,
            'submap': Map
        }

        self.attribute_map = {
            'pos': 'pos',
            'size': 'size',
            'image': 'image',
            'id': 'id',
            'text': 'text',
            'description': 'description',
            'blocked': 'blocked',
            'submap': 'submap'
        }
        self._pos = pos
        self._size = size
        self._image = image
        self._id = id
        self._text = text
        self._description = description
        self._blocked = blocked
        self._submap = submap

    @classmethod
    def from_dict(cls, dikt) -> 'MapItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MapItem of this MapItem.  # noqa: E501
        :rtype: MapItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pos(self) -> Vector2i:
        """Gets the pos of this MapItem.


        :return: The pos of this MapItem.
        :rtype: Vector2i
        """
        return self._pos

    @pos.setter
    def pos(self, pos: Vector2i):
        """Sets the pos of this MapItem.


        :param pos: The pos of this MapItem.
        :type pos: Vector2i
        """
        if pos is None:
            raise ValueError("Invalid value for `pos`, must not be `None`")  # noqa: E501

        self._pos = pos

    @property
    def size(self) -> Vector2i:
        """Gets the size of this MapItem.


        :return: The size of this MapItem.
        :rtype: Vector2i
        """
        return self._size

    @size.setter
    def size(self, size: Vector2i):
        """Sets the size of this MapItem.


        :param size: The size of this MapItem.
        :type size: Vector2i
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def image(self) -> str:
        """Gets the image of this MapItem.


        :return: The image of this MapItem.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this MapItem.


        :param image: The image of this MapItem.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def id(self) -> str:
        """Gets the id of this MapItem.


        :return: The id of this MapItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MapItem.


        :param id: The id of this MapItem.
        :type id: str
        """

        self._id = id

    @property
    def text(self) -> str:
        """Gets the text of this MapItem.


        :return: The text of this MapItem.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this MapItem.


        :param text: The text of this MapItem.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def description(self) -> str:
        """Gets the description of this MapItem.


        :return: The description of this MapItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this MapItem.


        :param description: The description of this MapItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def blocked(self) -> bool:
        """Gets the blocked of this MapItem.


        :return: The blocked of this MapItem.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked: bool):
        """Sets the blocked of this MapItem.


        :param blocked: The blocked of this MapItem.
        :type blocked: bool
        """

        self._blocked = blocked

    @property
    def submap(self) -> Map:
        """Gets the submap of this MapItem.


        :return: The submap of this MapItem.
        :rtype: Map
        """
        return self._submap

    @submap.setter
    def submap(self, submap: Map):
        """Sets the submap of this MapItem.


        :param submap: The submap of this MapItem.
        :type submap: Map
        """

        self._submap = submap
