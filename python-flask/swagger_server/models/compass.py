# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Compass(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, n: str=None, ne: str=None, e: str=None, se: str=None, s: str=None, sw: str=None, w: str=None, nw: str=None, up: str=None, down: str=None, _in: str=None, out: str=None):  # noqa: E501
        """Compass - a model defined in Swagger

        :param n: The n of this Compass.  # noqa: E501
        :type n: str
        :param ne: The ne of this Compass.  # noqa: E501
        :type ne: str
        :param e: The e of this Compass.  # noqa: E501
        :type e: str
        :param se: The se of this Compass.  # noqa: E501
        :type se: str
        :param s: The s of this Compass.  # noqa: E501
        :type s: str
        :param sw: The sw of this Compass.  # noqa: E501
        :type sw: str
        :param w: The w of this Compass.  # noqa: E501
        :type w: str
        :param nw: The nw of this Compass.  # noqa: E501
        :type nw: str
        :param up: The up of this Compass.  # noqa: E501
        :type up: str
        :param down: The down of this Compass.  # noqa: E501
        :type down: str
        :param _in: The _in of this Compass.  # noqa: E501
        :type _in: str
        :param out: The out of this Compass.  # noqa: E501
        :type out: str
        """
        self.swagger_types = {
            'n': str,
            'ne': str,
            'e': str,
            'se': str,
            's': str,
            'sw': str,
            'w': str,
            'nw': str,
            'up': str,
            'down': str,
            '_in': str,
            'out': str
        }

        self.attribute_map = {
            'n': 'n',
            'ne': 'ne',
            'e': 'e',
            'se': 'se',
            's': 's',
            'sw': 'sw',
            'w': 'w',
            'nw': 'nw',
            'up': 'up',
            'down': 'down',
            '_in': 'in',
            'out': 'out'
        }
        self._n = n
        self._ne = ne
        self._e = e
        self._se = se
        self._s = s
        self._sw = sw
        self._w = w
        self._nw = nw
        self._up = up
        self._down = down
        self.__in = _in
        self._out = out

    @classmethod
    def from_dict(cls, dikt) -> 'Compass':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Compass of this Compass.  # noqa: E501
        :rtype: Compass
        """
        return util.deserialize_model(dikt, cls)

    @property
    def n(self) -> str:
        """Gets the n of this Compass.


        :return: The n of this Compass.
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n: str):
        """Sets the n of this Compass.


        :param n: The n of this Compass.
        :type n: str
        """

        self._n = n

    @property
    def ne(self) -> str:
        """Gets the ne of this Compass.


        :return: The ne of this Compass.
        :rtype: str
        """
        return self._ne

    @ne.setter
    def ne(self, ne: str):
        """Sets the ne of this Compass.


        :param ne: The ne of this Compass.
        :type ne: str
        """

        self._ne = ne

    @property
    def e(self) -> str:
        """Gets the e of this Compass.


        :return: The e of this Compass.
        :rtype: str
        """
        return self._e

    @e.setter
    def e(self, e: str):
        """Sets the e of this Compass.


        :param e: The e of this Compass.
        :type e: str
        """

        self._e = e

    @property
    def se(self) -> str:
        """Gets the se of this Compass.


        :return: The se of this Compass.
        :rtype: str
        """
        return self._se

    @se.setter
    def se(self, se: str):
        """Sets the se of this Compass.


        :param se: The se of this Compass.
        :type se: str
        """

        self._se = se

    @property
    def s(self) -> str:
        """Gets the s of this Compass.


        :return: The s of this Compass.
        :rtype: str
        """
        return self._s

    @s.setter
    def s(self, s: str):
        """Sets the s of this Compass.


        :param s: The s of this Compass.
        :type s: str
        """

        self._s = s

    @property
    def sw(self) -> str:
        """Gets the sw of this Compass.


        :return: The sw of this Compass.
        :rtype: str
        """
        return self._sw

    @sw.setter
    def sw(self, sw: str):
        """Sets the sw of this Compass.


        :param sw: The sw of this Compass.
        :type sw: str
        """

        self._sw = sw

    @property
    def w(self) -> str:
        """Gets the w of this Compass.


        :return: The w of this Compass.
        :rtype: str
        """
        return self._w

    @w.setter
    def w(self, w: str):
        """Sets the w of this Compass.


        :param w: The w of this Compass.
        :type w: str
        """

        self._w = w

    @property
    def nw(self) -> str:
        """Gets the nw of this Compass.


        :return: The nw of this Compass.
        :rtype: str
        """
        return self._nw

    @nw.setter
    def nw(self, nw: str):
        """Sets the nw of this Compass.


        :param nw: The nw of this Compass.
        :type nw: str
        """

        self._nw = nw

    @property
    def up(self) -> str:
        """Gets the up of this Compass.


        :return: The up of this Compass.
        :rtype: str
        """
        return self._up

    @up.setter
    def up(self, up: str):
        """Sets the up of this Compass.


        :param up: The up of this Compass.
        :type up: str
        """

        self._up = up

    @property
    def down(self) -> str:
        """Gets the down of this Compass.


        :return: The down of this Compass.
        :rtype: str
        """
        return self._down

    @down.setter
    def down(self, down: str):
        """Sets the down of this Compass.


        :param down: The down of this Compass.
        :type down: str
        """

        self._down = down

    @property
    def _in(self) -> str:
        """Gets the _in of this Compass.


        :return: The _in of this Compass.
        :rtype: str
        """
        return self.__in

    @_in.setter
    def _in(self, _in: str):
        """Sets the _in of this Compass.


        :param _in: The _in of this Compass.
        :type _in: str
        """

        self.__in = _in

    @property
    def out(self) -> str:
        """Gets the out of this Compass.


        :return: The out of this Compass.
        :rtype: str
        """
        return self._out

    @out.setter
    def out(self, out: str):
        """Sets the out of this Compass.


        :param out: The out of this Compass.
        :type out: str
        """

        self._out = out
